' Print files in the selected folder tree
'(Configured to created PDF files using the 'ADOBE PDF' print driver)
' This script will ignore compressed folders (*.zip)
'-----------------------------------------------------------------------
'
option explicit
Dim  fso, objNetwork, objshell, objFolder, objFile, oshell
Dim  UserProfilePath, drvLtr, mapdrv, x, sPrompt, origin, ptype, ftype
Dim  logfile, myfolder, item, targetfolder, tempfolder, fldr, newfile
Dim  tag, synopsis, result, count, skip, batchsize, intermission, emsg, n
Dim  cur, FileExtKey, WshShell ,Shell , FileExtStatus, objFSO
Dim  backupfolder
'
'
 tempfolder = "\DESKTOP\CONVERSIONS\"   '(must start and end with a backslash)
 batchsize = 40                         '(Max batch size; avoids memory saturation)
 intermission = 120                     '(# of seconds to pause between batches)
 tag="_"				'(unique characters added to base file name, before'.pdf')
'
'========= OTHER VARIABLES ==========
'
Set objshell = CreateObject("WScript.Shell")
Set fso = CreateObject("Scripting.FileSystemObject")
Set objNetwork = WScript.CreateObject("WScript.Network")
UserProfilePath = objshell.ExpandEnvironmentStrings("%UserProfile%")
'
intermission = intermission * 1000
tempfolder = UserProfilepath & tempfolder
backupfolder = fso.BuildPath(tempfolder, "OriginalBackups")
logfile = fso.BuildPath(tempfolder, "Results.log")
cur = 0
'
'
'===== CHECK SETTINGS BEFORE SELECTING FOLDER =====
'
  CALL CHECKTEMP(tempfolder)
  CALL ENSUREBACKUPFOLDER(tempfolder, backupfolder)
  CALL CHECKPRINTER(tempfolder)
'
'===== SHOW FILE EXTENSIONS ====
'
  CALL SHOWEXT(cur)
'
'===== MESSAGE BOX CONFIGURATION =====
'
synopsis =         "This script will convert all ' "_
 & "xfdl/xfd" &    " ' files in a folder to PDF format."_
 &CHR(10)&CHR(10)& "BEFORE RUNNING THE SCRIPT, YOU MUST DO THE FOLLOWING: "_
 &CHR(10)&CHR(10)& "Set 'ADOBE PDF' as your default printer" _
 &CHR(10)&         "Change the printer's printing preferences to be:"_
 &CHR(10)&         " - View Adobe PDF results (UNCHECK BOX)" _
 &CHR(10)&         " - Adobe PDF Output Folder (Set to '" &tempfolder & "' )"_
 &CHR(10)&CHR(10)& "The script will pause after each batch of "_
 & batchsize &     " files to ensure the queue "_
 &CHR(10)&         "doesn't fill system memory. "_
 &CHR(10)&CHR(10)& "Please be patient. This may take a while!"
'
x=msgbox(Synopsis,0,"==> SET ADOBE PDF AS THE DEFAULT PRINTER !!")
'
'====== USER-DEFINED VARIABLES ======
'
Do
	origin = Inputbox("Enter the source directory (must be the full path e.g. \\ptfm-sa-san1v\305APS\PTFM-305APS-G\TRXC)","Input Required")	'(origin is the network folder 'UNC' path, no ending slash)
		If origin = vbEmpty Then WScript.Quit (1)
		If origin = "" Then
			MsgBox "You must enter a source directory (must be the full path e.g. \\ptfm-sa-san1v\305APS\PTFM-305APS-G\TRXC)"
		End If
Loop While origin = ""
'
'===== DETERMINE PATH TYPE =====
'
If InStr(1,origin,"\\",vbTextCompare) > 0 Then 
	ptype = 1
Else ptype = 0
End If
'
if ptype= 0 then origin = 17            'Browse computer drives
'
'========== BROWSE FOR FOLDER NAME ===========
'
sPrompt = "Select the folder containing " & "xfdl/xfd" & " files " & CHR(10)_
  & "to be converted to PDF format."
'
Set oshell = CreateObject("Shell.Application")
Set objFolder = oshell.BrowseForFolder(0, sPrompt, 1, origin)
If objFolder Is Nothing Then Wscript.Quit
'
myfolder= objFolder.self.path
'
'======== MAP THE FOLDER TO A DRIVE LETTER (UNC Path only) ============
'      (Shortens the path length to avoid file system errors)
'
if ptype=1 then
	mapdrv=90  ' ASCII value for Z, used for drive letter search
	drvltr=chr(mapdrv)
'
	do until fso.driveexists(drvLtr) = false
 		drvltr=chr(mapdrv)
		mapDrv=mapDrv-1
	loop
'
	drvltr = drvltr&":"
	objNetwork.MapNetworkDrive drvLtr, myfolder, False
'
	myfolder=right(myfolder, len(myfolder)-len(origin))
	myfolder=drvLtr & "\" & myfolder
end if
'
'========= COMPLETE SETUP =============
'
set fldr = objfolder
count=0
skip=0
'
'Initialize temporary working folder
  fso.DeleteFile(tempfolder&"*.*")
'
' Create log for skipped files
  set objFile=fso.OpenTextFile(logFile,2,True) 
  objFile.Write "CONVERSION RESULTS" &vbCrLf
  objFile.close'
'
'======================================
'============= RUN SCRIPT =============
'
Createobject("wscript.shell").popup "Beginning conversions...",3,"Converting Files.",64
'
ftype = "xfdl"
CALL MAKEPDF(fldr, ftype, tempfolder, myfolder, count, skip, batchsize)
'
'
ftype = "xfd"
CALL MAKEPDF(fldr, ftype, tempfolder, myfolder, count, skip, batchsize)
'
if count + skip = 0 then 
        msgbox ("No "& "[." & ftype &" ] files found") 
else 
	synopsis =         "CONVERSION RESULTS:" _
	&CHR(10)&CHR(10)&  "Folder:  ..."& right(myfolder,len(myfolder)-2) _
	&CHR(10)&CHR(10)&  "Converted files:  " & count _
	&CHR(10)&          "Skipped files:    " & skip _
	&CHR(10)&CHR(10)&  "(Results are listed in " &tempfolder&")" _
	&CHR(10)&CHR(10)&  "DON'T FORGET TO RESTORE YOUR DEFAULT PRINTER!!"
'
	x=msgbox(synopsis,0,"Conversion Completed")
end if
cur = 1
CALL SHOWEXT(cur)
'
' Remove mapped drive letter and close out
'
if ptype =1 then objNetwork.RemoveNetworkDrive drvLtr, true
'
wscript.quit
'END OF SCRIPT
'
'======================================
'======================================
'
SUB MAKEPDF(fldr, ftype, tempfolder, myfolder, count, skip, batchsize)
'
ON ERROR RESUME NEXT
'   Avoid "permission denied" and other file system errors
'   including corrupt (0 byte) files, etc.
'
For each item in oshell.NameSpace(fldr).Items
'
   if item.IsFolder AND lcase(fso.GetExtensionName(item)) <> "zip"  Then
        CALL MAKEPDF(item.path, ftype, tempfolder, myfolder, count, skip, batchsize)
   '
   elseif lcase(fso.GetExtensionName(item)) = lcase(ftype) then
	Dim originalPath, originalStamp, originalSize, backupPath
	Dim safeToCopy, conversionSuccessful
	emsg = ""
	originalPath = item.path
	originalStamp = item.ModifyDate
	originalSize = item.Size
	backupPath = CreateSourceBackup(originalPath, backupfolder)
	safeToCopy = (Len(backupPath) > 0)
	conversionSuccessful = False
	targetfolder = left(item.path, InStrRev(item.path, "\"))
	newfile=fso.GetBaseName(item) &".pdf"
	result = left(newfile, InStrRev(newfile, ".")-1) & tag & ".pdf"
	'
	if fso.FileExists(targetfolder&result) then
		emsg = "PDF EXISTS:   "
	else
		if safeToCopy then
			'
			item.InvokeVerbEx ( "Print" )         'create PDF file
			'
			'Rename new file to reduce chances of naming conflicts
			n = 0   'Counter to avoid infinite loop if errors occur
			Do until fso.FileExists(tempfolder&newfile)
				n = n+1
				WScript.Sleep(100) 'allow for network latency
				if n > 80 then exit do  '(80x100 = 8 seconds)
			loop
			'
			if fso.FileExists(tempfolder&newfile) then
			   fso.movefile tempfolder&newfile, tempfolder&result
			   WScript.Sleep(100) 'allow for network latency
			end if
		else
			emsg = "BACKUP FAILED:   "
		end if
		'
	end if
	'
	' Move new files to original folder (don't overwrite existing files)
	' Files in read-only folders will be skipped
	'
	if safeToCopy AND len(emsg) < 2 then
		ON ERROR RESUME NEXT
		fso.CopyFile tempfolder&result, targetfolder
		if err.number=0 then
			conversionSuccessful = True
		else
			emsg = "ERROR: >>>>>  "
			err.clear
		end if
		ON ERROR goto 0
	end if
	'
	if conversionSuccessful then
		CALL ValidateOriginal(originalPath, originalStamp, originalSize, backupPath, emsg)
	end if
	'
	if conversionSuccessful AND len(emsg) < 2 then
		count=count+1
		set objFile=fso.OpenTextFile(logfile,8,True)
		objFile.Write vbCrLf & "Done          " & item.path
		objFile.Close
	else
		skip=skip+1
		if len(emsg) < 2 then
			if safeToCopy then
				emsg= "ERROR: >>>>>  "
			else
				emsg= "BACKUP FAILED:   "
			end if
		end if
		'Add skipped file names to log file
		set objFile=fso.OpenTextFile(logfile,8,True)
		objFile.Write vbCrLf & emsg & item.path
		objFile.Close
		emsg=""
	end if
	'
	if fso.FileExists(tempfolder&result) then _
		fso.DeleteFile(tempfolder&result)
	'
	' Pause after each batch of files (variable 'batchsize') to allow
	' Acrobat Distiller processes to catch up (avoids PC memory saturation)
	'
	if count mod batchsize = 0 AND count > 1 then _
		WScript.Sleep(intermission)    'batch size reached - pause
   end if
		'
'
   CALL CHECKTEMP(tempfolder)
   CALL ENSUREBACKUPFOLDER(tempfolder, backupfolder)
'
Next
'
END SUB
'
'======================================
'======================================
'
SUB CHECKTEMP(tempfolder)
'
' Confirm that tempfolder exists...
'
' The folder is not automatically created because this subroutine also
' provides an way to abort the script by renaming or deleting the 
' temporary folder. {Ctrl-C} and {Break} don't interrupt VBscript.
'
   if fso.FolderExists(tempfolder) then
	' [Continue executing script]
   else
	synopsis="Folder "&CHR(10) & tempfolder & CHR(10)& _
	 " was not found! Please create it."
'
	x=msgbox(synopsis,0,"Please Create Folder for Working Files")
'
	wscript.quit
   end if
'
END SUB
'======================================
'
SUB ENSUREBACKUPFOLDER(tempfolder, backupfolder)

   if fso.FolderExists(tempfolder) then
        if fso.FolderExists(backupfolder) = false then
                ON ERROR RESUME NEXT
                fso.CreateFolder backupfolder
                if err.number <> 0 then
                        synopsis="Unable to create backup folder at:" &CHR(10)& backupfolder &CHR(10)& _
                         "The script will exit to keep source documents safe."
                        err.clear
                        x=msgbox(synopsis,0,"Backup Folder Required")
                        wscript.quit
                end if
                ON ERROR GOTO 0
        end if
   end if

END SUB
'======================================
'
SUB CHECKPRINTER(tempfolder)
'
' Confirm that 'ADOBE PDF' is the default printer...
'
  set objFile=fso.OpenTextFile(tempfolder&"TestFile.txt",2,True) 
  objFile.Write "Checking Default printer" &vbCrLf
  objFile.close
  objShell.Run("Notepad.exe /p "&tempfolder&"TestFile.txt") ,0 ,True
  WScript.Sleep(200)
'
  if fso.FileExists(tempfolder&"TestFile.pdf") then
      fso.DeleteFile(tempfolder&"TestFile.*")
  else
      synopsis="Please set the default printer to ADOBE PDF."
      x=msgbox(synopsis,0,"Check Printer Settings")
      fso.DeleteFile(tempfolder&"TestFile.*")
      wscript.quit
'
   end if
'
END SUB
'
'
Function CreateSourceBackup(originalPath, backupfolder)

    Dim backupPath
    backupPath = ""

    if len(originalPath) = 0 then
        CreateSourceBackup = ""
        Exit Function
    end if

    if fso.FileExists(originalPath) = false then
        CreateSourceBackup = ""
        Exit Function
    end if

    if fso.FolderExists(backupfolder) = false then
        ON ERROR RESUME NEXT
        fso.CreateFolder(backupfolder)
        if err.number <> 0 then
            err.clear
            CreateSourceBackup = ""
            ON ERROR GOTO 0
            Exit Function
        end if
        ON ERROR GOTO 0
    end if

    backupPath = GetBackupPath(originalPath, backupfolder)

    ON ERROR RESUME NEXT
    fso.CopyFile originalPath, backupPath, False
    if err.number <> 0 then
        err.clear
        backupPath = ""
    end if
    ON ERROR GOTO 0

    CreateSourceBackup = backupPath

End Function
'
'==========================================================================='
'
Function GetBackupPath(originalPath, backupfolder)

    Dim baseName, extension, timestamp, candidate
    baseName = fso.GetBaseName(originalPath)
    extension = fso.GetExtensionName(originalPath)
    timestamp = FormatTimestampForFileName(Now)
    if len(extension) > 0 then
        candidate = fso.BuildPath(backupfolder, baseName & "_" & timestamp & "." & extension)
    else
        candidate = fso.BuildPath(backupfolder, baseName & "_" & timestamp)
    end if

    Do While fso.FileExists(candidate)
        Randomize
        timestamp = timestamp & "_" & CStr(Int((1000) * Rnd))
        if len(extension) > 0 then
            candidate = fso.BuildPath(backupfolder, baseName & "_" & timestamp & "." & extension)
        else
            candidate = fso.BuildPath(backupfolder, baseName & "_" & timestamp)
        end if
    Loop

    GetBackupPath = candidate

End Function
'
'==========================================================================='
'
Function FormatTimestampForFileName(dt)

    Dim formatted
    formatted = CStr(dt)
    formatted = Replace(formatted, ":", "-")
    formatted = Replace(formatted, "/", "-")
    formatted = Replace(formatted, " ", "_")
    formatted = Replace(formatted, ",", "")
    FormatTimestampForFileName = formatted

End Function
'
'==========================================================================='
'
Sub ValidateOriginal(originalPath, originalStamp, originalSize, backupPath, emsg)

    Dim fileInfo, sizeChanged, timeChanged

    if len(emsg) > 0 then Exit Sub

    if fso.FileExists(originalPath) = false then
        if RestoreOriginalFromBackup(backupPath, originalPath) then
            emsg = "SOURCE RESTORED: "
        else
            emsg = "SOURCE MISSING: "
        end if
        Exit Sub
    end if

    Set fileInfo = fso.GetFile(originalPath)
    sizeChanged = False
    timeChanged = False

    ON ERROR RESUME NEXT
    if CLng(originalSize) <> CLng(fileInfo.Size) then sizeChanged = True
    if err.number <> 0 then
        err.clear
        sizeChanged = True
    end if
    if DateDiff("s", CDate(originalStamp), CDate(fileInfo.DateLastModified)) <> 0 then timeChanged = True
    if err.number <> 0 then
        err.clear
        timeChanged = True
    end if
    ON ERROR GOTO 0

    if sizeChanged OR timeChanged then
        if RestoreOriginalFromBackup(backupPath, originalPath) then
            emsg = "SOURCE RESTORED: "
        else
            emsg = "SOURCE MODIFIED: "
        end if
    end if

End Sub
'
'==========================================================================='
'
Function RestoreOriginalFromBackup(backupPath, originalPath)

    RestoreOriginalFromBackup = False

    if len(backupPath) = 0 then Exit Function
    if fso.FileExists(backupPath) = false then Exit Function

    ON ERROR RESUME NEXT
    fso.CopyFile backupPath, originalPath, True
    if err.number = 0 then
        RestoreOriginalFromBackup = True
    else
        err.clear
    end if
    ON ERROR GOTO 0

End Function
'
'==========================================================================='
'===========================================================================
'
SUB SHOWEXT(cur)
'
FileExtKey = "HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced\HideFileExt"

Set WshShell = WScript.CreateObject("WScript.Shell")
FileExtStatus = WshShell.RegRead(FileExtKey)

WshShell.RegWrite FileExtKey, cur, "REG_DWORD"

Set Shell = Wscript.CreateObject("WScript.Shell")
Shell.AppActivate "Program Manager"
Shell.SendKeys "{F5}"
Set Shell = Nothing
'
END SUB
'
'===========================================================================
'
'DEFINTIONS
'
' count: the number of files assessed for conversion
' drvLtr: the drive letter containing the target folder
' emsg: error flag in log file for files that weren't converted
' fldr: a variable representing the folder object (for targetfolder)
' fso: file system object
' ftype: the file type to be converted
' intermission: the length time the script pauses (at batchsize)
' item: the individual folder or file being assessed (dynamic)
' mapdrv: the mapped drive letter representing the UNC path (origin)
' batchsize: the number of files converted before the script pauses
' myfolder: the path of the target folder (objFolder)
' n: counter to escape from do loops that may be "stuck"
' newfile: the name of the PDF file created by the ADOBE PDF printer
' objFile: windows file object
' objFolder: windows folder object (from Browse dialog)
' objNetwork: network object
' objshell: Windows shell
' oshell: windows shell
' origin: the UNC path to be mapped to a drive letter
' ptype: the path type (used to configure script execution)
' result: the final name of the new PDF file to the original folder
' skip: counter for files skipped due to duplicate filenames
' sPrompt: the prompt text for the Browse Folders dialog box
' synopsis: prompt text for message boxes
' tag: characters added to the base file name to make it unique
' targetlist: list of files included in the target folder
' targetfolder: path of the folder containing original unconverted files
' tempfolder: path of the folder used for temporary working files
' UserProfilePath: path to the the user's Windows profile
' x: dummy variable used to display message boxes
'===========================================================================
'
'----------------------------------------
' Rod Wilkinson, CIO/G-6, Dec 2014
' Femme Comp, Inc. (FCI)
'----------------------------------------
'----------------------------------------
' Guy Borrelli, SSgt, USAF
' Jan 2017
'
' Change log:
' -Prompts user for source directory
' -Determines ptype from source directory
' -Enables/disables file extension
' -Converts both xfdl and xfd files in one pass
' -Optimized sequence of events
'----------------------------------------
